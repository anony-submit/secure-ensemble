// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: proto/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CSPService_EnrollModel_FullMethodName      = "/svhn_ensemble.CSPService/EnrollModel"
	CSPService_RequestInference_FullMethodName = "/svhn_ensemble.CSPService/RequestInference"
)

// CSPServiceClient is the client API for CSPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CSPServiceClient interface {
	EnrollModel(ctx context.Context, in *EnrollModelRequest, opts ...grpc.CallOption) (*EnrollModelResponse, error)
	RequestInference(ctx context.Context, in *InferenceRequest, opts ...grpc.CallOption) (*InferenceResponse, error)
}

type cSPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCSPServiceClient(cc grpc.ClientConnInterface) CSPServiceClient {
	return &cSPServiceClient{cc}
}

func (c *cSPServiceClient) EnrollModel(ctx context.Context, in *EnrollModelRequest, opts ...grpc.CallOption) (*EnrollModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnrollModelResponse)
	err := c.cc.Invoke(ctx, CSPService_EnrollModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSPServiceClient) RequestInference(ctx context.Context, in *InferenceRequest, opts ...grpc.CallOption) (*InferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InferenceResponse)
	err := c.cc.Invoke(ctx, CSPService_RequestInference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CSPServiceServer is the server API for CSPService service.
// All implementations must embed UnimplementedCSPServiceServer
// for forward compatibility.
type CSPServiceServer interface {
	EnrollModel(context.Context, *EnrollModelRequest) (*EnrollModelResponse, error)
	RequestInference(context.Context, *InferenceRequest) (*InferenceResponse, error)
	mustEmbedUnimplementedCSPServiceServer()
}

// UnimplementedCSPServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCSPServiceServer struct{}

func (UnimplementedCSPServiceServer) EnrollModel(context.Context, *EnrollModelRequest) (*EnrollModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollModel not implemented")
}
func (UnimplementedCSPServiceServer) RequestInference(context.Context, *InferenceRequest) (*InferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestInference not implemented")
}
func (UnimplementedCSPServiceServer) mustEmbedUnimplementedCSPServiceServer() {}
func (UnimplementedCSPServiceServer) testEmbeddedByValue()                    {}

// UnsafeCSPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CSPServiceServer will
// result in compilation errors.
type UnsafeCSPServiceServer interface {
	mustEmbedUnimplementedCSPServiceServer()
}

func RegisterCSPServiceServer(s grpc.ServiceRegistrar, srv CSPServiceServer) {
	// If the following call pancis, it indicates UnimplementedCSPServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CSPService_ServiceDesc, srv)
}

func _CSPService_EnrollModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSPServiceServer).EnrollModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CSPService_EnrollModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSPServiceServer).EnrollModel(ctx, req.(*EnrollModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSPService_RequestInference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSPServiceServer).RequestInference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CSPService_RequestInference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSPServiceServer).RequestInference(ctx, req.(*InferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CSPService_ServiceDesc is the grpc.ServiceDesc for CSPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CSPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "svhn_ensemble.CSPService",
	HandlerType: (*CSPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnrollModel",
			Handler:    _CSPService_EnrollModel_Handler,
		},
		{
			MethodName: "RequestInference",
			Handler:    _CSPService_RequestInference_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}

const (
	DataOwnerService_PerformPartialDecryption_FullMethodName = "/svhn_ensemble.DataOwnerService/PerformPartialDecryption"
)

// DataOwnerServiceClient is the client API for DataOwnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataOwnerServiceClient interface {
	PerformPartialDecryption(ctx context.Context, in *PartialDecryptionRequest, opts ...grpc.CallOption) (*PartialDecryptionResponse, error)
}

type dataOwnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataOwnerServiceClient(cc grpc.ClientConnInterface) DataOwnerServiceClient {
	return &dataOwnerServiceClient{cc}
}

func (c *dataOwnerServiceClient) PerformPartialDecryption(ctx context.Context, in *PartialDecryptionRequest, opts ...grpc.CallOption) (*PartialDecryptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PartialDecryptionResponse)
	err := c.cc.Invoke(ctx, DataOwnerService_PerformPartialDecryption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataOwnerServiceServer is the server API for DataOwnerService service.
// All implementations must embed UnimplementedDataOwnerServiceServer
// for forward compatibility.
type DataOwnerServiceServer interface {
	PerformPartialDecryption(context.Context, *PartialDecryptionRequest) (*PartialDecryptionResponse, error)
	mustEmbedUnimplementedDataOwnerServiceServer()
}

// UnimplementedDataOwnerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataOwnerServiceServer struct{}

func (UnimplementedDataOwnerServiceServer) PerformPartialDecryption(context.Context, *PartialDecryptionRequest) (*PartialDecryptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformPartialDecryption not implemented")
}
func (UnimplementedDataOwnerServiceServer) mustEmbedUnimplementedDataOwnerServiceServer() {}
func (UnimplementedDataOwnerServiceServer) testEmbeddedByValue()                          {}

// UnsafeDataOwnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataOwnerServiceServer will
// result in compilation errors.
type UnsafeDataOwnerServiceServer interface {
	mustEmbedUnimplementedDataOwnerServiceServer()
}

func RegisterDataOwnerServiceServer(s grpc.ServiceRegistrar, srv DataOwnerServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataOwnerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataOwnerService_ServiceDesc, srv)
}

func _DataOwnerService_PerformPartialDecryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartialDecryptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataOwnerServiceServer).PerformPartialDecryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataOwnerService_PerformPartialDecryption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataOwnerServiceServer).PerformPartialDecryption(ctx, req.(*PartialDecryptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataOwnerService_ServiceDesc is the grpc.ServiceDesc for DataOwnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataOwnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "svhn_ensemble.DataOwnerService",
	HandlerType: (*DataOwnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PerformPartialDecryption",
			Handler:    _DataOwnerService_PerformPartialDecryption_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
